//Prisma = ORM (object relational mapping) 번역기 역할 js(TS)와 db의 사다리 역할 
//사용하기 위해 프리즈마에게 schema.prisma에 db가 어떻게 생겨 먹었는지 모양을 알려줘야 한다.
//clinet는 훌륭한 자동완성을 도와줘서 좋다.
//prisma-studio도 있어서좋다. (비주얼 데이터베이서 브라우저) (설치를 안해도 되서 너무좋다.)
//mysql을 사용하는 이유는 PlanetScale과 호환이 되어서 사용 

//stop 1
//npx prisma init ->  prisma .env 파일 생성됨 
//step 2 
//.env 파일에  DATABASE_URL 세팅을 해줘야함
//step 3 
//schema.prisma에서 datasource db 객체 안에 provider를 "mysql"로 바꿔줘야함 

//planet scale이란 ? mysql과 호환되는 serverless db플랫폼,  Vitess는 유튜브를 scale하기 위해 구글이 만든것으로 대규모 기업들이 mysql을 스케일링 하기 위해 쓰는방법  , 가장 스케일링이 뛰어난 오프소스 db      

// Planet Scale cli 설치 (맥)
// 터미널에서 아래를 차례대로 실행
// 1. brew install planetscale/tap/pscale
// (pscale은 Homebrew Tap을 통해 사용할 수 있습니다.)
// 2. brew install mysql-client (mysql client설치)
// 3. brew upgrade pscale (최신 버전 업데이트)

// 4.터미널에 pscale 쳐서 오류가없으면 잘설치됨

// 5.pscale auth login 로그인
// 6.pscale region list 리전확인 ( ap-northeast 기억 )
// 7.pscale database create carrott-marget --region ap-northeast db생성
// 8.pscale connect carrot-market  db연결 -> mysql다운 설치 실행 필요 x  , .env파일 필요 x 브라우저에서 제공   , 하나는 플래넷스케일용 하나는 컴퓨터용으로 쓸필요x 

// mysql compatible vitess는 오류를 안보내기 때문에 prisma를 통해 오류를 확인해야한다. 
// 9.clinet -> previewFeatures=["referentialIntegrity"] , datasource -> referentialIntegrity = "prisma" 추가 

// prisma schema를  planetscale에 push
//10. npx prisma db push 

// client가 먼진 모르겠지만 이를 사용하기위해 => 생각하는 방식으로 구성하고 앱에 맞춤화된 유형으로 Prisma 스키마에서 자동 생성되는 쿼리 빌더입니다.
// Prisma Client가 mongo DB의 mongoose와 같은 역할인가요?
// Yea! 

// npx prisma studio

//12.libs파일생성 client.ts 생성
//13.npm install @prisma/client

// 모델 Token의 user가 자동완성 되지 않고 referentialIntegrity를 주석처리해도 자동 완성이 되지 않을 때에는 우선 저장을 해둔 뒤에 콘솔창에 npx prisma format을 입력하시면 됩니다.
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"] //추가
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma" //추가2 
}

model User {
  id        Int      @id @default(autoincrement())
  phone     Int?     @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
